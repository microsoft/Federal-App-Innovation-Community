{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "templateVersion": {
            "defaultValue": "220504.2100",
            "type": "String",
            "allowedValues": [
                "220504.2100"
            ],
            "metadata": {
                "description": "This is the version of the template you are running."
            }
        },
        "deploymentScenario": {
            "defaultValue": "Deploy Virtual Network, App Service, AppGateway Subnet with Microsoft.Web service endpoint, App Gateway, Log Analytics workspace, Automation Account, Assign Automation Account's Managed Identity with Log Analytics Reader role to Log Analytics workspace, and Alert. The deployed App Service will become the backend to the App Gateway and restricted to only accept request from the App Gateway IP. This configures the app so it is only accessible using App Gateway URL.",
            "type": "String",
            "allowedValues": [
                "Deploy Virtual Network, App Service, AppGateway Subnet with Microsoft.Web service endpoint, App Gateway, Log Analytics workspace, Automation Account, Assign Automation Account's Managed Identity with Log Analytics Reader role to Log Analytics workspace, and Alert. The deployed App Service will become the backend to the App Gateway and restricted to only accept request from the App Gateway IP. This configures the app so it is only accessible using App Gateway URL."
            ],
            "metadata": {
                "description": "Describes the purpose and resources to be deployed."
            }
        },
        "virtualNetworkIPRange": {
            "defaultValue": "192.168.0.0/16",
            "type": "String",
            "allowedValues": [
                "192.168.0.0/16",
                "10.0.0.0/16",
                "10.10.0.0/16",
                "10.100.0.0/16"
            ],
            "metadata": {
                "description": "This is the IP Range for the virtual network in which the Azure App Gateway and Web App will reside."
            }
        },
        "deploymentPurpose": {
            "type": "string",
            "defaultValue": "webAppExample",
            "metadata": {
                "description": "Short hand term used to create Azure resources."
            }
        },
        "failedRunbookAlertEmail": {
            "defaultValue": "first.last@mail.com",
            "type": "string",
            "metadata": {
                "description": "This is the email that will receive the failure notification."
            }
        },
        "baseTime": {
            "type": "string",
            "defaultValue": "[utcNow('u')]",
            "metadata": {
                "description": "Schedule will start one hour from this time."
            }
        }
    },
    "variables": {
        "webAppDnsName": ".azurewebsites",
        "networkLocation": "[resourceGroup().location]",
        "webAppDnsExtension" : "[if(contains(variables('networkLocation'), 'usgov'), '.us', '.net')]",
        "skuTier": "WAF_v2",
        "webAppUniqueName": "[format('{0}-{1}', parameters('deploymentPurpose'), uniqueString(resourceGroup().id))]",
        "virtualNetworkName": "[concat('VNet-', variables('webAppUniqueName'))]",
        "IPBase": "[split(parameters('virtualNetworkIPRange'),'.')]",
        "subnetAppGatewayName": "AppGatewaySubnet",
        "subnetAppGatewayIPRange": "[format('{0}.{1}.{2}.{3}/{4}', variables('IPBase')[0], variables('IPBase')[1], '0', '0', '26')]",
        "appGatewayName": "[concat('AppGw-', variables('webAppUniqueName'))]",
        "appGatewayCapacity": 2,
        "appGatewayPortName": "port_80",
        "appGatewayPort": 80,
        "appGatewayProtocol": "Http",
        "appGatewayFrontEndName": "appGwPublicFrontendIp",
        "appGatewayBackEndPoolName": "internalWebApp",
        "appGatewayBackEndHttpSettingsName": "myHttpSetting",
        "appGatewayHttpListenerName": "myListener",
        "azureWafPoliciesName": "[concat('Waf-AppGw-', variables('webAppUniqueName'))]",
        "publicIPAppGatewayName": "[concat('Pip-AppGw-', variables('webAppUniqueName'))]",
        "logAnalyticsWorkspaceName": "[concat('Law-', variables('webAppUniqueName'))]",
        "webAppServiceName": "[concat('AppService-', variables('webAppUniqueName'))]",
        "webAppInternalName": "[concat(variables('webAppUniqueName'),'-Internal')]",
        "webAppSkuName": "P1v2",
        "automationAccountName": "[concat('AutoAcct-', variables('webAppUniqueName'), '-ToCLAW')]",
        "scheduleName": "UploadAzureAppGatewayLogs",
        "jobName00": "00",
        "jobName01": "01",
        "jobName02": "02",
        "jobName03": "03",
        "scheduleCount": 5,
        "startTime": "[dateTimeAdd(parameters('baseTime'), 'PT1H')]",
        "runbookName": "[concat('Runbook-', variables('webAppUniqueName'), '-ToCLAW')]",
        "runbookUri": "https://raw.githubusercontent.com/Azure/trusted-internet-connection/main/Runbook/UploadToCLAW-S3.ps1",
        "diagSettingsName": "[concat('SendtoWorkspace-', variables('webAppUniqueName'))]",
        "actionGroupName": "FailureEmail",
        "tenantIdObject": {
            "value": "[subscription().tenantId]",
            "type": "object"
        },
        "tenantId": "[variables('tenantIdObject').value]",
        "logAnalyticsReaderRoleId": "73c42c96-874c-492b-b04d-ab87d138a893"
    },
    "resources": [
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2021-04-01-preview",
            "name": "[guid(variables('automationAccountName'))]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('logAnalyticsReaderRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName')), '2021-06-22', 'Full').identity.principalId]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "[resourceId('Microsoft.Web/sites', variables('webAppInternalName'))]",
                "[resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-11-01",
            "name": "[variables('virtualNetworkName')]",
            "location": "[variables('networkLocation')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('virtualNetworkIPRange')]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-11-01",
            "name": "[concat(variables('virtualNetworkName'), '/', variables('subnetAppGatewayName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "properties": {
                "addressPrefix": "[variables('subnetAppGatewayIPRange')]",
                "serviceEndpoints": [
                    {
                        "service": "Microsoft.Web",
                        "locations": [
                            "*"
                        ]
                    }
                ],
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-11-01",
            "name": "[variables('publicIPAppGatewayName')]",
            "location": "[variables('networkLocation')]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4,
                "ipTags": []
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2020-06-01",
            "name": "[variables('appGatewayName')]",
            "location": "[variables('networkLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAppGatewayName'))]",
                "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', variables('azureWafPoliciesName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetAppGatewayName'))]",
                "[resourceId('Microsoft.Web/sites', variables('webAppInternalName'))]"
            ],
            "properties": {
                "sku": {
                    "name": "[variables('skuTier')]",
                    "tier": "[variables('skuTier')]",
                    "capacity": "[variables('appGatewayCapacity')]"
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetAppGatewayName'))]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('appGatewayFrontEndName')]",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAppGatewayName'))]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "[variables('appGatewayPortName')]",
                        "properties": {
                            "port": "[variables('appGatewayPort')]"
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('appGatewayBackEndPoolName')]",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "fqdn": "[concat(variables('webAppInternalName'), variables('webAppDnsName'), variables('webAppDnsExtension'))]"
                                }
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "[variables('appGatewayBackEndHttpSettingsName')]",
                        "properties": {
                            "port": "[variables('appGatewayPort')]",
                            "protocol": "[variables('appGatewayProtocol')]",
                            "cookieBasedAffinity": "Disabled",
                            "pickHostNameFromBackendAddress": true,
                            "requestTimeout": 20
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "[variables('appGatewayHttpListenerName')]",
                        "properties": {
                            "firewallPolicy": {
                                "id": "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', variables('azureWafPoliciesName'))]"
                            },
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('appGatewayName'), variables('appGatewayFrontEndName'))]"
                            },
                            "frontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('appGatewayName'), variables('appGatewayPortName'))]"
                            },
                            "protocol": "[variables('appGatewayProtocol')]",
                            "requireServerNameIndication": false
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "name": "myRoutingRule",
                        "properties": {
                            "ruleType": "Basic",
                            "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('appGatewayName'), variables('appGatewayHttpListenerName'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGatewayName'), variables('appGatewayBackEndPoolName'))]"
                            },
                            "backendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGatewayName'), variables('appGatewayBackEndHttpSettingsName'))]"
                            }
                        }
                    }
                ],
                "enableHttp2": false,
                "webApplicationFirewallConfiguration": {
                    "enabled": true,
                    "firewallMode": "Prevention",
                    "ruleSetType": "OWASP",
                    "ruleSetVersion": "3.2",
                    "requestBodyCheck": true,
                    "maxRequestBodySizeInKb": 128,
                    "fileUploadLimitInMb": 100
                },
                "firewallPolicy": {
                    "id": "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', variables('azureWafPoliciesName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies",
            "apiVersion": "2020-06-01",
            "name": "[variables('azureWafPoliciesName')]",
            "location": "[variables('networkLocation')]",
            "properties": {
                "customRules": [],
                "policySettings": {
                    "requestBodyCheck": true,
                    "maxRequestBodySizeInKb": 128,
                    "fileUploadLimitInMb": 100,
                    "state": "Enabled",
                    "mode": "Prevention"
                },
                "managedRules": {
                    "exclusions": [],
                    "managedRuleSets": [
                        {
                            "ruleSetType": "OWASP",
                            "ruleSetVersion": "3.2",
                            "ruleGroupOverrides": []
                        },
                        {
                            "ruleSetType": "Microsoft_BotManagerRuleSet",
                            "ruleSetVersion": "0.1",
                            "ruleGroupOverrides": []
                        }
                    ]
                }
            }
        },
        {
            "type": "microsoft.operationalinsights/workspaces",
            "apiVersion": "2021-06-01",
            "name": "[variables('logAnalyticsWorkspaceName')]",
            "location": "[variables('networkLocation')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30,
                "features": {
                    "enableLogAccessUsingOnlyResourcePermissions": true
                },
                "workspaceCapping": {
                    "dailyQuotaGb": -1
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2020-06-01",
            "name": "[variables('webAppServiceName')]",
            "location": "[variables('networkLocation')]",
            "sku": {
                "name": "[variables('webAppSkuName')]",
                "tier": "[variables('skuTier')]",
                "size": "[variables('webAppSkuName')]",
                "family": "[variables('webAppSkuName')]",
                "capacity": 1
            },
            "kind": "app",
            "properties": {}
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-06-01",
            "name": "[variables('webAppInternalName')]",
            "location": "[variables('networkLocation')]",
            "kind": "app",
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('webAppServiceName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('webAppServiceName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2021-02-01",
            "name": "[concat(variables('webAppInternalName'), '/web')]",
            "location": "[variables('networkLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('webAppInternalName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetAppGatewayName'))]"
            ],
            "properties": {
                "numberOfWorkers": 1,
                "ipSecurityRestrictions": [
                    {
                        "vnetSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetAppGatewayName'))]",
                        "action": "Allow",
                        "tag": "Default",
                        "priority": 300
                    },
                    {
                        "ipAddress": "Any",
                        "action": "Deny",
                        "priority": 2147483647,
                        "name": "Deny all",
                        "description": "Deny all access"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts",
            "apiVersion": "2021-06-22",
            "name": "[variables('automationAccountName')]",
            "location": "[variables('networkLocation')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "disableLocalAuth": false,
                "sku": {
                    "name": "Basic"
                },
                "encryption": {
                    "keySource": "Microsoft.Automation",
                    "identity": {}
                }
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts/modules",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/AWSPowerShell')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
            ],
            "properties": {
                "contentLink": {
                    "uri": "https://devopsgallerystorage.blob.core.windows.net:443/packages/awspowershell.4.1.16.nupkg"
                }
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts/runbooks",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('automationAccountName'), '/' , variables('runbookName'))]",
            "location": "[variables('networkLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
            ],
            "properties": {
                "runbookType": "PowerShell",
                "logVerbose": false,
                "logProgress": false,
                "logActivityTrace": 0,
                "publishContentLink": {
                    "uri": "[variables('runbookUri')]"
                }
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts/schedules",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/', variables('scheduleName'), '-', copyIndex())]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
            ],
            "properties": {
                "description": "Every hour initiate the UploadToCLAW-S3 runbook.",
                "startTime": "[dateTimeAdd(variables('startTime'), concat('PT', mul(copyIndex(), 30) ,'M'))]",
                "interval": 1,
                "frequency": "Hour",
                "timeZone": "America/New_York"
            },
            "copy": {
                "name": "scheduleCount",
                "count": "[variables('scheduleCount')]"
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts/jobSchedules",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/', guid(variables('automationAccountName'), variables('jobName00')))]",
            "properties": {
                "parameters": {
                    "logAzureAppGateway": "true"
                },
                "runbook": {
                    "name": "[variables('runbookName')]"
                },
                "schedule": {
                    "name": "[concat(variables('scheduleName'), '-0')]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts/runbooks', variables('automationAccountName'), variables('runbookName'))]",
                "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'), '/schedules/', concat(variables('scheduleName'), '-0'))]"
            ]
        },
        {
            "type": "Microsoft.Automation/automationAccounts/jobSchedules",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/', guid(variables('automationAccountName'), variables('jobName01')))]",
            "properties": {
                "parameters": {
                    "logAzureAppGateway": "true"
                },
                "runbook": {
                    "name": "[variables('runbookName')]"
                },
                "schedule": {
                    "name": "[concat(variables('scheduleName'), '-1')]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts/runbooks', variables('automationAccountName'), variables('runbookName'))]",
                "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'), '/schedules/', concat(variables('scheduleName'), '-1'))]"
            ]
        },
        {
            "type": "Microsoft.Automation/automationAccounts/jobSchedules",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/', guid(variables('automationAccountName'), variables('jobName02')))]",
            "properties": {
                "parameters": {
                    "logAzureAppGateway": "true"
                },
                "runbook": {
                    "name": "[variables('runbookName')]"
                },
                "schedule": {
                    "name": "[concat(variables('scheduleName'), '-2')]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts/runbooks', variables('automationAccountName'), variables('runbookName'))]",
                "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'), '/schedules/', concat(variables('scheduleName'), '-2'))]"
            ]
        },
        {
            "type": "Microsoft.Automation/automationAccounts/jobSchedules",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/', guid(variables('automationAccountName'), variables('jobName03')))]",
            "properties": {
                "parameters": {
                    "logAzureAppGateway": "true"
                },
                "runbook": {
                    "name": "[variables('runbookName')]"
                },
                "schedule": {
                    "name": "[concat(variables('scheduleName'), '-3')]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts/runbooks', variables('automationAccountName'), variables('runbookName'))]",
                "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'), '/schedules/', concat(variables('scheduleName'), '-3'))]"
            ]
        },
        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/TenantId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
            ],
            "properties": {
                "description": "This is the Tenant ID from Azure AD. Initially populated from Deployment ARM Template.",
                "value": "[concat('\"',variables('tenantId'),'\"')]"
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/LogAnalyticWorkspaceID')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "description": "Log Analytics Workspace where the Azure Firewall sends its diagnostic logs. Initially populated from Deployment ARM Template.",
                "value": "[concat('\"',reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))).customerId,'\"')]"
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/AWSAccessKey')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
            ],
            "properties": {
                "isEncrypted": true,
                "description": "Provided by CISA."
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/AWSSecretKey')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
            ],
            "properties": {
                "isEncrypted": true,
                "description": "Provided by CISA, this will expire. Please discuss with CISA to understand when it rotates. Please UPDATE this variable before it expires."
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2020-01-13-preview",
            "name": "[concat(variables('automationAccountName'), '/S3BucketName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
            ],
            "properties": {
                "isEncrypted": true,
                "description": "Provided by CISA."
            }
        },
        {
            "type": "microsoft.insights/actionGroups",
            "apiVersion": "2021-09-01",
            "name": "[variables('actionGroupName')]",
            "location": "Global",
            "properties": {
                "groupShortName": "[variables('actionGroupName')]",
                "enabled": true,
                "emailReceivers": [
                    {
                        "name": "Email_-EmailAction-",
                        "emailAddress": "[parameters('failedRunbookAlertEmail')]",
                        "useCommonAlertSchema": true
                    }
                ],
                "smsReceivers": [],
                "webhookReceivers": [],
                "eventhubReceivers": [],
                "itsmReceivers": [],
                "azureAppPushReceivers": [],
                "automationRunbookReceivers": [],
                "voiceReceivers": [],
                "logicAppReceivers": [],
                "azureFunctionReceivers": [],
                "armRoleReceivers": []
            }
        },
        {
            "type": "microsoft.insights/metricAlerts",
            "apiVersion": "2018-03-01",
            "name": "Failed Runbook Job",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
                "[resourceId('microsoft.insights/actionGroups', variables('actionGroupName'))]"
            ],
            "properties": {
                "severity": 0,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT5M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 0,
                            "name": "Metric1",
                            "metricNamespace": "Microsoft.Automation/automationAccounts",
                            "metricName": "TotalJob",
                            "dimensions": [
                                {
                                    "name": "Status",
                                    "operator": "Include",
                                    "values": [
                                        "Failed"
                                    ]
                                }
                            ],
                            "operator": "GreaterThan",
                            "timeAggregation": "Count",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": false,
                "targetResourceType": "Microsoft.Automation/automationAccounts",
                "targetResourceRegion": "[variables('networkLocation')]",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', variables('actionGroupName'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways/providers/diagnosticSettings",
            "name": "[concat(variables('appGatewayName'),'/microsoft.insights/', variables('diagSettingsName'))]",
            "apiVersion": "2021-05-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "[resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName'))]"
            ],
            "properties": {
                "name": "DiagService",
                "storageAccountId": null,
                "eventHubAuthorizationRuleId": null,
                "eventHubName": null,
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "logs": [
                    {
                        "category": "ApplicationGatewayAccessLog",
                        "enabled": true,
                        "retentionPolicy": {
                            "days": 10,
                            "enabled": false
                        }
                    },
                    {
                        "category": "ApplicationGatewayPerformanceLog",
                        "enabled": true,
                        "retentionPolicy": {
                            "days": 10,
                            "enabled": false
                        }
                    },
                    {
                        "category": "ApplicationGatewayFirewallLog",
                        "enabled": true,
                        "retentionPolicy": {
                            "days": 10,
                            "enabled": false
                        }
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true,
                        "retentionPolicy": {
                            "enabled": false,
                            "days": 0
                        }
                    }
                ]
            }
        }
    ]
}