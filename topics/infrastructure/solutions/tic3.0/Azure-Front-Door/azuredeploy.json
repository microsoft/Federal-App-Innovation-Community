{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "deploymentPurpose": {
            "type": "string",
            "defaultValue": "webAppExample",
            "metadata": {
                "description": "Short hand term used to create Azure resources."
            }
        }
    },
    "variables": {
        "webAppDnsName": ".azurewebsites",
        "networkLocation": "[resourceGroup().location]",
        "webAppDnsExtension" : "[if(contains(variables('networkLocation'), 'usgov'), '.us', '.net')]",
        "skuTier": "WAF_v2",
        "webAppUniqueName": "[format('{0}-{1}', parameters('deploymentPurpose'), uniqueString(resourceGroup().id))]",
        "frontDoorName": "[concat('frontDr', parameters('deploymentPurpose'), uniqueString(resourceGroup().id))]",
        "frontDoorDomain": ".azurefd",
        "frontDoorDomainExtension" : "[if(contains(variables('networkLocation'), 'usgov'), '.us', '.net')]",
        "frontDoorBackEndPoolName": "internalWebApp",
        "frontDoorLoadBalanaceSettingsName": "loadBalancingSettings",
        "frontDoorHealthProbeSettingsName": "healthProbeSettings",
        "frontDoorRouteRulesName": "routeRules",
        "azureWafPoliciesName": "[concat('WafFrontDr', uniqueString(resourceGroup().id))]",
        "logAnalyticsWorkspaceName": "[concat('Law-', variables('webAppUniqueName'))]",
        "eventHubNamespaceName": "[concat('EvHbNmSpc-', variables('webAppUniqueName'))]",
        "eventHubName": "[concat('EvHb-', variables('webAppUniqueName'))]",
        "webAppServiceName": "[concat('AppService-', variables('webAppUniqueName'))]",
        "webAppInternalName": "[concat(variables('webAppUniqueName'),'-Internal')]",
        "webAppSkuName": "P1v2",
        "diagSettingsName": "[concat('SendtoWorkspace-', variables('webAppUniqueName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/frontdoors",
            "apiVersion": "2020-05-01",
            "name": "[variables('frontDoorName')]",
            "location": "Global",
            "dependsOn": [
                "[resourceId('Microsoft.Network/frontdoorwebapplicationfirewallpolicies', variables('azureWafPoliciesName'))]",
                "[resourceId('Microsoft.Web/sites', variables('webAppInternalName'))]"
            ],
            "properties": {
                "resourceState": "Enabled",
                "enabledState": "Enabled",
                "friendlyName": "[variables('frontDoorName')]",
                "frontendEndpoints": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), concat('/FrontendEndpoints/', variables('frontDoorName'), '-azurefd'))]",
                        "name": "[concat(variables('frontDoorName'), '-azurefd')]",
                        "properties": {
                            "resourceState": "Enabled",
                            "hostName": "[concat(variables('frontDoorName'), variables('frontDoorDomain'), variables('frontDoorDomainExtension'))]",
                            "sessionAffinityEnabledState": "Disabled",
                            "sessionAffinityTtlSeconds": 0,
                            "webApplicationFirewallPolicyLink": {
                                "id": "[resourceId('Microsoft.Network/frontdoorwebapplicationfirewallpolicies', variables('azureWafPoliciesName'))]"
                            }
                        }
                    }
                ],
                 "backendPools": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/BackendPools/', variables('frontDoorBackEndPoolName'))]",
                        "name": "[variables('frontDoorBackEndPoolName')]",
                        "properties": {
                            "resourceState": "Enabled",
                            "backends": [
                                {
                                    "address": "[concat(variables('webAppInternalName'), '.azurewebsites.net')]",
                                    "httpPort": 80,
                                    "httpsPort": 443,
                                    "priority": 1,
                                    "weight": 50,
                                    "backendHostHeader": "[concat(variables('webAppInternalName'), '.azurewebsites.net')]",
                                    "enabledState": "Enabled"
                                }
                            ],
                            "loadBalancingSettings": {
                                "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/loadBalancingSettings/', variables('frontDoorLoadBalanaceSettingsName'))]"
                            },
                            "healthProbeSettings": {
                                "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/healthProbeSettings/', variables('frontDoorHealthProbeSettingsName'))]"
                            }
                        }
                    }
                ],
                "backendPoolsSettings": {
                    "enforceCertificateNameCheck": "Enabled",
                    "sendRecvTimeoutSeconds": 30
                },
                "loadBalancingSettings": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/loadBalancingSettings/', variables('frontDoorLoadBalanaceSettingsName'))]",
                        "name": "[variables('frontDoorLoadBalanaceSettingsName')]",
                        "properties": {
                            "resourceState": "Enabled",
                            "sampleSize": 4,
                            "successfulSamplesRequired": 2,
                            "additionalLatencyMilliseconds": 0
                        }
                    }
                ],
                "healthProbeSettings": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/healthProbeSettings/', variables('frontDoorHealthProbeSettingsName'))]",
                        "name": "[variables('frontDoorHealthProbeSettingsName')]",
                        "properties": {
                            "resourceState": "Enabled",
                            "path": "/",
                            "protocol": "Https",
                            "intervalInSeconds": 30,
                            "enabledState": "Enabled",
                            "healthProbeMethod": "Get"
                        }
                    }
                ],
                "routingRules": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/RoutingRules/httpToHttpsRedirect')]",
                        "name": "httpToHttpsRedirect",
                        "properties": {
                            "routeConfiguration": {
                                "redirectType": "Found",
                                "redirectProtocol": "HttpsOnly",
                                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"
                            },
                            "resourceState": "Enabled",
                            "frontendEndpoints": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), concat('/FrontendEndpoints/', variables('frontDoorName'), '-azurefd'))]"
                                }
                            ],
                            "acceptedProtocols": [
                                "Http"
                            ],
                            "patternsToMatch": [
                                "/*"
                            ],
                            "enabledState": "Enabled"
                        }
                    },
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/RoutingRules/', variables('frontDoorRouteRulesName'))]",
                        "name": "[variables('frontDoorRouteRulesName')]",
                        "properties": {
                            "routeConfiguration": {
                                "forwardingProtocol": "HttpsOnly",
                                "backendPool": {
                                    "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/BackendPools/', variables('frontDoorBackEndPoolName'))]"
                                },
                                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"
                            },
                            "resourceState": "Enabled",
                            "frontendEndpoints": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), concat('/FrontendEndpoints/', variables('frontDoorName'), '-azurefd'))]"
                                }
                            ],
                            "acceptedProtocols": [
                                "Https"
                            ],
                            "patternsToMatch": [
                                "/*"
                            ],
                            "enabledState": "Enabled"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/frontdoorwebapplicationfirewallpolicies",
            "apiVersion": "2020-11-01",
            "name": "[variables('azureWafPoliciesName')]",
            "location": "Global",
            "sku": {
                "name": "Classic_AzureFrontDoor"
            },
            "properties": {
                "policySettings": {
                    "enabledState": "Enabled",
                    "mode": "Prevention",
                    "customBlockResponseStatusCode": 403,
                    "requestBodyCheck": "Enabled"
                },
                "managedRules": {
                    "managedRuleSets": [
                        {
                            "ruleSetType": "Microsoft_DefaultRuleSet",
                            "ruleSetVersion": "1.1",
                            "ruleGroupOverrides": [],
                            "exclusions": []
                        },
                        {
                            "ruleSetType": "Microsoft_BotManagerRuleSet",
                            "ruleSetVersion": "1.0",
                            "ruleGroupOverrides": [],
                            "exclusions": []
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2022-10-01-preview",
            "name": "[variables('eventHubNamespaceName')]",
            "location": "[variables('networkLocation')]",
            "sku": {
                "name": "Standard",
                "tier": "Standard",
                "capacity": 1
            },
            "properties": {
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": true,
                "zoneRedundant": true,
                "isAutoInflateEnabled": true,
                "maximumThroughputUnits": 2,
                "kafkaEnabled": true
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/authorizationrules",
            "apiVersion": "2022-10-01-preview",
            "name": "[concat(variables('eventHubNamespaceName'), '/RootManageSharedAccessKey')]",
            "location": "[variables('networkLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
            ],
            "properties": {
                "rights": [
                    "Listen",
                    "Manage",
                    "Send"
                ]
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "apiVersion": "2022-10-01-preview",
            "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubName'))]",
            "location": "[variables('networkLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
            ],
            "properties": {
                "retentionDescription": {
                    "cleanupPolicy": "Delete",
                    "retentionTimeInHours": 7
                },
                "messageRetentionInDays": 1,
                "partitionCount": 1,
                "status": "Active"
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/networkRuleSets",
            "apiVersion": "2022-10-01-preview",
            "name": "[concat(variables('eventHubNamespaceName'), '/default')]",
            "location": "[variables('networkLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
            ],
            "properties": {
                "publicNetworkAccess": "Enabled",
                "defaultAction": "Allow",
                "virtualNetworkRules": [],
                "ipRules": []
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "apiVersion": "2022-10-01-preview",
            "name": "[concat(variables('eventHubNamespaceName'), '/',variables('eventHubName'),'/$Default')]",
            "location": "[variables('networkLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]",
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
            ],
            "properties": {}
        },
        {
            "type": "microsoft.operationalinsights/workspaces",
            "apiVersion": "2021-06-01",
            "name": "[variables('logAnalyticsWorkspaceName')]",
            "location": "[variables('networkLocation')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30,
                "features": {
                    "enableLogAccessUsingOnlyResourcePermissions": true
                },
                "workspaceCapping": {
                    "dailyQuotaGb": -1
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/dataexports",
            "apiVersion": "2020-08-01",
            "name": "[concat(variables('logAnalyticsWorkspaceName'), '/ExportToEvenHub')]",
            "location": "[variables('networkLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "dataExportId": "1c22961b-e7bf-4d74-9625-b19212c9ff43",
                "destination": {
                    "resourceId": "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]",
                    "metaData": {
                        "eventHubName": "[variables('eventHubName')]"
                    }
                },
                "tableNames": [
                    "Syslog"
                ],
                "enable": true
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/tables",
            "apiVersion": "2021-12-01-preview",
            "name": "[concat(variables('logAnalyticsWorkspaceName'), '/Syslog')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "totalRetentionInDays": 30,
                "plan": "Analytics",
                "schema": {
                    "name": "Syslog"
                },
                "retentionInDays": 30
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2020-06-01",
            "name": "[variables('webAppServiceName')]",
            "location": "[variables('networkLocation')]",
            "sku": {
                "name": "[variables('webAppSkuName')]",
                "tier": "[variables('skuTier')]",
                "size": "[variables('webAppSkuName')]",
                "family": "[variables('webAppSkuName')]",
                "capacity": 1
            },
            "kind": "app",
            "properties": {}
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-06-01",
            "name": "[variables('webAppInternalName')]",
            "location": "[variables('networkLocation')]",
            "kind": "app",
            "properties": {
                "enabled": true,
                "hostNameSslStates": [
                    {
                        "name": "[concat(variables('webAppInternalName'), variables('webAppDnsName'), variables('webAppDnsExtension'))]",
                        "sslState": "Disabled",
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(variables('webAppInternalName'), '.scm', variables('webAppDnsName'), variables('webAppDnsExtension'))]",
                        "sslState": "Disabled",
                        "hostType": "Repository"
                    }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('webAppServiceName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('webAppServiceName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2021-02-01",
            "name": "[concat(variables('webAppInternalName'), '/web')]",
            "location": "[variables('networkLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('webAppInternalName'))]"
            ],
            "properties": {
                "numberOfWorkers": 1,
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "AzureFrontDoor.Backend",
                        "action": "Allow",
                        "tag": "ServiceTag",
                        "priority": 100,
                        "name": "RestrictAccessToFrontDoor",
                        "headers": {
                            "x-azure-fdid": [
                                "[reference(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName'))).frontdoorId]"
                            ]
                        }
                    },
                    {
                        "ipAddress": "Any",
                        "action": "Deny",
                        "priority": 2147483647,
                        "name": "Deny all",
                        "description": "Deny all access"
                    }
                ],
                "scmIpSecurityRestrictions": [
                    {
                        "ipAddress": "Any",
                        "action": "Allow",
                        "priority": 1,
                        "name": "Allow all",
                        "description": "Allow all access"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/frontdoors/providers/diagnosticSettings",
            "name": "[concat(variables('frontDoorName'),'/microsoft.insights/', variables('diagSettingsName'))]",
            "apiVersion": "2021-05-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]",
                "[resourceId('Microsoft.Network/frontdoors', variables('frontDoorName'))]"
            ],
            "properties": {
                "name": "DiagService",
                "storageAccountId": null,
                "eventHubAuthorizationRuleId": "[resourceId('Microsoft.EventHub/namespaces/authorizationrules', variables('eventHubNamespaceName'), 'RootManageSharedAccessKey')]",
                "eventHubName": "[variables('eventHubName')]",
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "logs": [
                    {
                        "category": "FrontdoorAccessLog",
                        "enabled": true,
                        "retentionPolicy": {
                            "days": 10,
                            "enabled": false
                        }
                    },
                    {
                        "category": "FrontdoorWebApplicationFirewallLog",
                        "enabled": true,
                        "retentionPolicy": {
                            "days": 10,
                            "enabled": false
                        }
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true,
                        "retentionPolicy": {
                            "enabled": false,
                            "days": 0
                        }
                    }
                ]
            }
        }
    ]
}